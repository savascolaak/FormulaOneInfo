// <auto-generated />
using System;
using FormulaOneInfo.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FormulaOneInfo.Data.Migrations
{
    [DbContext(typeof(FormulaOneContext))]
    [Migration("20241216191508_PilotTableModified")]
    partial class PilotTableModified
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.GrandPrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrandPrixDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Track")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("GrandPrixes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Bahreyn",
                            Country = "Birleşik Arap Emirlikleri",
                            CreatedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(1283),
                            GrandPrixDate = new DateTime(2024, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(1284),
                            Name = "Formula 2024 Bahreyn GP",
                            Note = "Formula 1 2024 Bahreyn GP",
                            SeasonId = 1,
                            Track = "Sakhir"
                        });
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Pilots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(2060),
                            DateOfBirth = new DateTime(1985, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Lewis",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Hamilton",
                            ModifiedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(2061),
                            Nationality = "UK",
                            Note = "Lewis Hamilton İngiliz Pilot",
                            Thumbnail = "Default.jpg"
                        });
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrandPrixId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrandPrixId");

                    b.HasIndex("PilotId");

                    b.HasIndex("TeamId");

                    b.ToTable("Results", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(3747),
                            GrandPrixId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(3748),
                            Note = "Results",
                            Order = 7,
                            PilotId = 1,
                            Points = 6,
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Seasons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(4299),
                            EndDate = new DateTime(2024, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(4300),
                            Name = "Formula 1 2024 Sezonu",
                            Note = "Formula 1 2024 Sezonu",
                            StartedDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Teams", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(4782),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2024, 12, 16, 22, 15, 8, 481, DateTimeKind.Local).AddTicks(4783),
                            Name = "Mercedes-Amg Petronas",
                            Note = "Formula 1 Mercedes Team",
                            StartedDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Thumbnail = "default.jpg"
                        });
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.GrandPrix", b =>
                {
                    b.HasOne("FormulaOneInfo.Entities.Concrete.Season", "Season")
                        .WithMany("GrandPrixes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Result", b =>
                {
                    b.HasOne("FormulaOneInfo.Entities.Concrete.GrandPrix", "GrandPrix")
                        .WithMany("Results")
                        .HasForeignKey("GrandPrixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormulaOneInfo.Entities.Concrete.Pilot", "Pilot")
                        .WithMany("Results")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FormulaOneInfo.Entities.Concrete.Team", "Team")
                        .WithMany("Results")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrandPrix");

                    b.Navigation("Pilot");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.GrandPrix", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Pilot", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Season", b =>
                {
                    b.Navigation("GrandPrixes");
                });

            modelBuilder.Entity("FormulaOneInfo.Entities.Concrete.Team", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
